FORMAT: 1A
HOST: http://api.carwash.io

# Washjoy
Washjoy API has been created for the mobile applications of the washjoy service.

# Status code used
```200``` successful request with body returned

```201``` successful creation request with body returned

```204``` successful request with nothing returned

```400``` bad request (input, validations, parameters...)

```401``` access denied (input, validations, parameters...)

```404``` resource(s) not found

# Authentification

When using authenticated endpoints provide the necessary header

```
Authorization: Token token=ENTER_YOUR_TOKEN_PROVIDED_BY_LOGIN_HERE
```

# Errors outputs
At least one key is returned when you get an error, "message" which is always a String.

```
{
  "message": "Resource not found."
}
```

Sometimes errors can be expressed with more details (validation), in that case, we return also an error key (object) with more information.

```javascript
{
  "message": "Validation failed."
  "errors": {
    "email": [ "can't be blank", "is not an email" ]
    "password": [ "can't be blank" ]
  }
}
```

# Group Users
A user is a consumer who use the service, to manage his account, review his previous carwashs, and book new ones.

## Users Collection [/users]
### Create a User [POST]

+ Parameters
    + email (required, string, `benjamin@obvious3.com`) ... String `email` of the customer
    + password (required, string, `123456`) ... String `password` of the customer
    + password_confirmation (required, string, `123456`) ... String

+ Request (application/json)

        {
          "user": {
            "email": "benjamin@obvious3.com",
            "password": "123456",
            "password_confirmation": "123456"
          }
        }

+ Response 201 (application/json; charset=utf-8)

        {
          "user": {
            "id": 1,
            "email": "benjamin@obvious3.com"
          }
        }

+ Response 400 (application/json; charset=utf-8)

        {
          "message": "Validation failed.",
          "errors": {
            "email": [ "can't be blank", "is not an email" ],
            "password": [ "can't be blank" ]
          }
        }

## User Session [/users/login]
### Login a User [POST]

+ Parameters
    + email (required, string, `benjamin@obvious3.com`) ... String `email` of the customer
    + password (required, string, `123456`) ... String `password` of the customer

+ Request (application/json)

        {
          "user": {
            "email": "benjamin@obvious3.com",
            "password": "123456"
          }
        }

+ Response 200 (application/json; charset=utf-8)

        {
          "user": {
            "id": 1,
            "email": "benjamin@obvious3.com",
            "auth_token": "hexadecimalToken"
          }
        }

+ Response 400 (application/json; charset=utf-8)

        {
          "message": "Login and/or password incorrect."
        }

## User [/users/:id]
### Retrieve a single User [GET]

+ Parameters
  + embed (optional, string, `addresses,cars,bookings`) ... String that define which association to get (between addresses, cars, bookings and all)

+ Response 200 (application/json; charset=utf-8)

        {
          "user": {
            "id": 1,
            "email": "benjamin@obvious3.com"
          }
        }

+ Request (application/json)

        {
          "embed": "cars,bookings"
        }

+ Response 200 (application/json; charset=utf-8)

        {
          "user": {
            "id": 1,
            "email": "benjamin@obvious3.com",
            "cars": [
              {
                ...
              },
              {
                ...
              }
            ],
            "bookings": [
              {
                ...
              },
              {
                ...
              }
            ]
          }
        }

# Group Cars
A car is a user resource. Many cars can belongs to a user. A car is also a required part of a Booking.

## Cars Collection [/users/:id/cars]
### Create a Car [POST]

+ Parameters
    + name (required, string, `SLK`) ... String `name` of the customer's car
    + description (required, string, `Black car, shiny and fast`) ... String `description` of the customer's car

+ Request (application/json)

        {
          "car": {
            "name": "SLK",
            "description": "Black car, shiny and fast"
          }
        }

+ Response 201 (application/json; charset=utf-8)

        {
          "car": {
            "id": 1,
            "name": "SLK",
            "description": "Black car, shiny and fast",
            "created_at": "2014-07-22T09:23:09.239Z",
            "updated_at": "2014-07-22T09:23:09.239Z"
          }
        }

+ Response 400 (application/json; charset=utf-8)

        {
          "message": "Validation failed.",
          "errors": {
            "description": [ "Can't be blank" ]
          }
        }

### List All User's Cars [GET]

+ Response 200 (application/json; charset=utf-8)

        {
          cars: [
            {
              "id": 1,
              "name": "SLK",
              "description": "Black car, shiny and fast",
              "created_at": "2014-07-22T09:23:09.239Z",
              "updated_at": "2014-07-22T09:23:09.239Z"
            },
            {
              "id": 2,
              "name": "Aston Martin",
              "description": "Only for the weekend bibibiaaatch",
              "created_at": "2014-07-22T09:23:09.239Z",
              "updated_at": "2014-07-22T09:23:09.239Z"
            }
          ]
        }

## Car [/cars/:id]
### Update a Car [PATCH]

+ Request (application/json)

        {
          "car": {
            "name": "Ferrari",
            "description": "Because now, I'm rich"
          }
        }

+ Response 200 (application/json; charset=utf-8)

        {
          "car": {
            "id": 1,
            "name": "Ferrari",
            "description": "Because now, I'm rich",
            "created_at": "2014-07-22T09:23:09.239Z",
            "updated_at": "2014-07-23T09:23:09.239Z"
          }
        }

+ Response 404 (application/json; charset=utf-8)

        {
          "message": "This resource has not been found"
        }

### Delete a Car [DELETE]

+ Response 404 (application/json; charset=utf-8)

        {
          "message": "This resource has not been found"
        }

# Group Addresses
An address is a user resource. Many addresses can belongs to a user. A car is also a required part of a Booking.

## Addresses Collection [/users/:id/addresses]
### Create an Address [POST]

+ Parameters
    + name (required, string, `Home`) ... Name of the customer's address
    + full_address (required, string, `4242 Whitworth Drive`) ... Full address of the customer

+ Request (application/json)

        {
          "address": {
            "name": "Home",
            "full_address": "4242 Whitworth Drive"
          }
        }

+ Response 201 (application/json; charset=utf-8)

        {
          "address": {
            "id": 1,
            "name": "Home",
            "full_address": "4242 Whitworth Drive",
            "created_at": "2014-07-22T09:23:09.239Z",
            "updated_at": "2014-07-22T09:23:09.239Z"
          }
        }

+ Request (application/json)

        {
          "address": {
            "name": "Home"
          }
        }

+ Response 400 (application/json; charset=utf-8)

        {
          "message": "Validation failed.",
          "errors": {
            "full_address": [ "Can't be blank "]
          }
        }

### List All User's Addresses [GET]

+ Response 200 (application/json; charset=utf-8)

        {
          addresses: [
            {
              "id": 1,
              "name": "Home",
              "full_address": "4242 Whitworth Drive",
              "created_at": "2014-07-22T09:23:09.239Z",
              "updated_at": "2014-07-22T09:23:09.239Z"
            },
            {
              "id": "2"
              "name": "Work",
              "full_address": "1010 Wilshire Blvd.",
              "created_at": "2014-07-22T09:23:09.239Z",
              "updated_at": "2014-07-22T09:23:09.239Z"
            }
          ]
        }

## Address [/addresses/:id]
### Update an Address [PATCH]

+ Request (application/json)

        {
          "address": {
            "name": "Client",
            "full_address": "4284 Hollywood Boulevard"
          }
        }

+ Response 200 (application/json; charset=utf-8)

        {
          "address": {
            "id": 1,
            "name": "Client",
            "full_address": "4284 Hollywood Boulevard",
            "created_at": "2014-07-22T09:23:09.239Z",
            "updated_at": "2014-07-22T09:23:09.239Z"
          }
        }

+ Response 404 (application/json; charset=utf-8)

        {
          "message": "This resource has not been found"
        }


### Delete an Address [DELETE]

+ Response 204

+ Response 404 (application/json; charset=utf-8)

        {
          "message": "This resource has not been found"
        }

# Group Packs
A pack is an wash package that customer can buy. It is a part of a Booking

Calls to packs endpoints are public, no need for authentification here.

## Packs Collection [/packs]
### List All Packs [GET]

+ Response 200 (application/json; charset=utf-8)

        {
          packs: [
            {
              "id": 1,
              "name": "Basic wash",
              "description": "This is an exterior wash",
              "price": "19.99"
            },
            {
              "id": "2"
              "name": "Super wash",
              "description": "This is an full interior + exterior wash",
              "price": "49.99"
            }
          ]
        }

## Pack Item [/packs/:id]
### Retrieve a single Pack [GET]

+ Response 200 (application/json; charset=utf-8)

        {
          pack: {
              "id": 1,
              "name": "Basic wash",
              "description": "This is an exterior wash",
              "price": "19.99"
          }
        }

+ Response 404 (application/json; charset=utf-8)

        {
          "message": "This resource has not been found"
        }

# Group Bookings
A booking is the entity that represents an order from a customer.

## Bookings Collection [/users/:id/bookings]
### Create a Booking [POST]

+ Parameters
    + car_id (required, integer, `1`) ... Identifier of the car the customer want to associate to the booking
    + address_id (required, integer, `1`) ... Identifier of the address the customer want to associate to the booking
    + pack_id (required, integer, `42`) ... Identifier of the pack the customer want to purchase
    + price (required, float, `29.99`) ... Frozen price of the pack at the time of the booking
    + date_due (required, datetime, `2015/05/17`) ... Date where the service will take place

+ Request (application/json)

        {
          "booking": {
            "car_id": 1,
            "address_id": 1,
            "pack_id": 1,
            "price": 29.99,
            "date_due": "2015/05/17"
          }
        }

+ Response 201 (application/json; charset=utf-8)

        {
          "booking": {
            "id": 1
          }
        }

+ Response 400 (application/json; charset=utf-8)

        {
          "message": "Validation failed.",
          "errors": {
            "price": [ "Can't be blank" ]
            "pack_id": [ "Can't be blank" ]
          }
        }

### List All User's Bookings [GET]

+ Response 200 (application/json; charset=utf-8)

        {
          "bookings" : [
            {
              "car_id": 1,
              "address_id": 1,
              "pack_id": 1,
              "price": 29.99,
              "date_due": "2014-07-22T09:23:09.239Z",
              "status": "done"
            },
            {
              "car_id": 1,
              "address_id": 2,
              "pack_id": 2,
              "price": 49.99,
              "date_due": "2014-07-22T09:23:09.239Z",
              "status": "created"
            }
          ]
        }
vv